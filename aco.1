package org.cloudbus.aco;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;

import org.cloudbus.cloudsim.Cloudlet;
import org.cloudbus.cloudsim.CloudletSchedulerTimeShared;
import org.cloudbus.cloudsim.Datacenter;
import org.cloudbus.cloudsim.DatacenterBroker;
import org.cloudbus.cloudsim.DatacenterCharacteristics;
import org.cloudbus.cloudsim.Host;
import org.cloudbus.cloudsim.Log;
import org.cloudbus.cloudsim.Pe;
import org.cloudbus.cloudsim.Storage;
import org.cloudbus.cloudsim.UtilizationModel;
import org.cloudbus.cloudsim.UtilizationModelFull;
import org.cloudbus.cloudsim.Vm;
import org.cloudbus.cloudsim.VmAllocationPolicySimple;
import org.cloudbus.cloudsim.VmSchedulerTimeShared;
import org.cloudbus.cloudsim.core.CloudSim;
import org.cloudbus.cloudsim.provisioners.BwProvisionerSimple;
import org.cloudbus.cloudsim.provisioners.PeProvisionerSimple;
import org.cloudbus.cloudsim.provisioners.RamProvisionerSimple;

public class UtilizationEnergyConsumptionOptimization {
	public static DatacenterBroker broker;

	private static List<Cloudlet> cloudletList;
	private static List<Vm> vmlist;

	public static void main(String[] args) {
		Log.println("Starting CloudSimEnergyOptimization with ACO...");

		try {
			int num_user = 1;
			Calendar calendar = Calendar.getInstance();
			boolean trace_flag = false;

			CloudSim.init(num_user, calendar, trace_flag);

			// Create Datacenter
			createDatacenter("Datacenter_0");

			// Create Broker
			broker = new DatacenterBroker("Broker");
			int brokerId = broker.getId();

			// Create Virtual Machines
			vmlist = new ArrayList<>();
			int mips = 1000;
			long size = 10000;
			int ram = 512;
			long bw = 1000;
			int pesNumber = 1;
			String vmm = "Xen";

			// Create 20 VMs
			for (int i = 0; i < 20; i++) {
				vmlist.add(new Vm(i, brokerId, mips, pesNumber, ram, bw, size, vmm, new CloudletSchedulerTimeShared()));
			}

			// Submit VM list to broker
			broker.submitGuestList(vmlist);

			// Create Cloudlets
			cloudletList = new ArrayList<>();
			int id = 0;
			long fileSize = 300;
			long outputSize = 300;
			UtilizationModel utilizationModel = new UtilizationModelFull();

			// Adding 10 Cloudlets
			for (int i = 0; i < 40; i++) {
				Cloudlet cloudlet = new Cloudlet(id++, 10000 * (i + 1), pesNumber, fileSize, outputSize,
						utilizationModel, utilizationModel, utilizationModel);
				cloudlet.setUserId(brokerId);
				cloudletList.add(cloudlet);
			}

			// Run ACO to schedule cloudlets to VMs
			ACOAlgorithm.acoScheduleCloudlets(cloudletList, vmlist);

			// Submit Cloudlets to broker
			broker.submitCloudletList(cloudletList);

			// Start Simulation
			CloudSim.startSimulation();

			CloudSim.stopSimulation();

			// Print results
			List<Cloudlet> newList = broker.getCloudletReceivedList();
			newList.sort(Comparator.comparing(Cloudlet::getCloudletId));

			Utility.printCloudletList(newList);

			Log.println("CloudSimEnergyOptimization finished!");
		} catch (Exception e) {
			e.printStackTrace();
			Log.println("Unwanted errors happen");
		}
	}

	private static Datacenter createDatacenter(String name) {
		List<Host> hostList = new ArrayList<>();
		List<Pe> peList = new ArrayList<>();
		int mips = 1000;
		peList.add(new Pe(0, new PeProvisionerSimple(mips)));

		int ram = 2048;
		long storage = 1000000;
		int bw = 10000;

		// Adding more hosts to the datacenter
		for (int i = 0; i < 20; i++) { // Creating 20 hosts
			hostList.add(new Host(i, new RamProvisionerSimple(ram), new BwProvisionerSimple(bw), storage, peList,
					new VmSchedulerTimeShared(peList)));
		}

		String arch = "x86";
		String os = "Linux";
		String vmm = "Xen";
		double time_zone = 10.0;
		double cost = 3.0;
		double costPerMem = 0.05;
		double costPerStorage = 0.001;
		double costPerBw = 0.0;
		LinkedList<Storage> storageList = new LinkedList<>();

		DatacenterCharacteristics characteristics = new DatacenterCharacteristics(arch, os, vmm, hostList, time_zone,
				cost, costPerMem, costPerStorage, costPerBw);

		Datacenter datacenter = null;
		try {
			datacenter = new Datacenter(name, characteristics, new VmAllocationPolicySimple(hostList), storageList, 0);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return datacenter;
	}
}
